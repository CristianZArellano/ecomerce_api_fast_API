{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "API E-commerce FastAPI",
		"description": "Colecci√≥n completa de endpoints para la API E-commerce construida con FastAPI.\n\n## C√≥mo usar:\n1. Importa esta colecci√≥n en Postman\n2. Importa el environment (postman_environment.json)\n3. Aseg√∫rate de que la API est√© corriendo en http://localhost:8000\n4. ¬°Ejecuta las pruebas!\n\n## Endpoints incluidos:\n- Sistema: health check y bienvenida\n- Usuarios: CRUD completo\n- Productos: CRUD completo\n\nüìö Documentaci√≥n: README.md y API_DOCUMENTATION.md",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üè† Sistema",
			"item": [
				{
					"name": "Endpoint de Bienvenida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains message and version\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson).to.have.property('version');",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Endpoint de bienvenida que retorna informaci√≥n b√°sica de la API incluyendo la versi√≥n actual."
					},
					"response": [
						{
							"name": "Respuesta exitosa",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"¬°Bienvenido a la API E-commerce!\",\n  \"version\": \"1.0.0\"\n}"
						}
					]
				},
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API is healthy\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql('ok');",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Health check para verificar el estado operativo de la API. √ötil para monitoreo."
					},
					"response": [
						{
							"name": "API Saludable",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"ok\",\n  \"message\": \"API funcionando correctamente\"\n}"
						}
					]
				}
			],
			"description": "Endpoints generales del sistema para verificar estado y obtener informaci√≥n b√°sica."
		},
		{
			"name": "üë• Usuarios",
			"item": [
				{
					"name": "Crear Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User was created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson).to.have.property('email');",
									"    pm.expect(responseJson).to.have.property('is_active');",
									"    pm.expect(responseJson).to.have.property('created_at');",
									"    ",
									"    // Guardar el ID para usar en otras pruebas",
									"    pm.environment.set('created_user_id', responseJson.id);",
									"});",
									"",
									"pm.test(\"User is active by default\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.is_active).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Juan P√©rez\",\n  \"email\": \"juan.perez@ejemplo.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Crea un nuevo usuario en el sistema. El email debe ser √∫nico y v√°lido."
					},
					"response": [
						{
							"name": "Usuario Creado Exitosamente",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Juan P√©rez\",\n  \"email\": \"juan.perez@ejemplo.com\"\n}"
								},
								"url": {
									"raw": "http://localhost:8000/users/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"users",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Juan P√©rez\",\n  \"email\": \"juan.perez@ejemplo.com\",\n  \"is_active\": true,\n  \"created_at\": \"2025-08-12T11:02:03.361908Z\"\n}"
						}
					]
				},
				{
					"name": "Listar Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Users have required properties\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0) {",
									"        const user = responseJson[0];",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('name');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user).to.have.property('is_active');",
									"        pm.expect(user).to.have.property('created_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/?skip=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "0",
									"description": "N√∫mero de registros a omitir"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "N√∫mero m√°ximo de registros a retornar"
								}
							]
						},
						"description": "Obtiene una lista paginada de todos los usuarios registrados en el sistema."
					},
					"response": [
						{
							"name": "Lista de Usuarios",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/users/?skip=0&limit=10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"users",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"name\": \"Juan P√©rez\",\n    \"email\": \"juan.perez@ejemplo.com\",\n    \"is_active\": true,\n    \"created_at\": \"2025-08-12T11:02:03.361908Z\"\n  }\n]"
						}
					]
				},
				{
					"name": "Obtener Usuario por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User has all required properties\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson).to.have.property('email');",
									"    pm.expect(responseJson).to.have.property('is_active');",
									"    pm.expect(responseJson).to.have.property('created_at');",
									"});",
									"",
									"pm.test(\"User ID matches requested ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = parseInt(pm.request.url.path[1]);",
									"    pm.expect(responseJson.id).to.eql(requestedId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{created_user_id}}"
							]
						},
						"description": "Obtiene los datos completos de un usuario espec√≠fico por su ID √∫nico."
					},
					"response": [
						{
							"name": "Usuario Encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/users/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Juan P√©rez\",\n  \"email\": \"juan.perez@ejemplo.com\",\n  \"is_active\": true,\n  \"created_at\": \"2025-08-12T11:02:03.361908Z\"\n}"
						}
					]
				},
				{
					"name": "Crear Usuario - Email Duplicado (Error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message is correct\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.include('Email already registered');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Pedro Garc√≠a\",\n  \"email\": \"juan.perez@ejemplo.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Prueba de validaci√≥n: intenta crear un usuario con un email ya existente. Debe retornar error 400."
					},
					"response": []
				}
			],
			"description": "Operaciones CRUD completas para la gesti√≥n de usuarios del sistema."
		},
		{
			"name": "üõçÔ∏è Productos",
			"item": [
				{
					"name": "Crear Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product was created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson).to.have.property('price');",
									"    pm.expect(responseJson).to.have.property('stock');",
									"    pm.expect(responseJson).to.have.property('is_available');",
									"    pm.expect(responseJson).to.have.property('created_at');",
									"    ",
									"    // Guardar el ID para usar en otras pruebas",
									"    pm.environment.set('created_product_id', responseJson.id);",
									"});",
									"",
									"pm.test(\"Product is available by default\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.is_available).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Laptop Dell XPS 13\",\n  \"description\": \"Laptop ultrabook ideal para desarrollo con procesador Intel i7, 16GB RAM y SSD 512GB\",\n  \"price\": 1299.99,\n  \"stock\": 15\n}"
						},
						"url": {
							"raw": "{{base_url}}/products/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								""
							]
						},
						"description": "Crea un nuevo producto en el cat√°logo. El precio debe ser mayor a 0."
					},
					"response": [
						{
							"name": "Producto Creado Exitosamente",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Laptop Dell XPS 13\",\n  \"description\": \"Laptop ultrabook ideal para desarrollo\",\n  \"price\": 1299.99,\n  \"stock\": 15\n}"
								},
								"url": {
									"raw": "http://localhost:8000/products/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"products",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Laptop Dell XPS 13\",\n  \"description\": \"Laptop ultrabook ideal para desarrollo\",\n  \"price\": 1299.99,\n  \"stock\": 15,\n  \"is_available\": true,\n  \"created_at\": \"2025-08-12T11:02:08.412563Z\"\n}"
						}
					]
				},
				{
					"name": "Listar Productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products have required properties\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0) {",
									"        const product = responseJson[0];",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('price');",
									"        pm.expect(product).to.have.property('stock');",
									"        pm.expect(product).to.have.property('is_available');",
									"        pm.expect(product).to.have.property('created_at');",
									"    }",
									"});",
									"",
									"pm.test(\"All products are available\", function () {",
									"    const responseJson = pm.response.json();",
									"    responseJson.forEach(function(product) {",
									"        pm.expect(product.is_available).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/?skip=0&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "0",
									"description": "N√∫mero de registros a omitir"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "N√∫mero m√°ximo de registros a retornar"
								}
							]
						},
						"description": "Obtiene una lista paginada de productos disponibles en el cat√°logo. Solo muestra productos con is_available = true."
					},
					"response": [
						{
							"name": "Lista de Productos",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/products/?skip=0&limit=20",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"products",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"name\": \"Laptop Dell XPS 13\",\n    \"description\": \"Laptop ultrabook ideal para desarrollo\",\n    \"price\": 1299.99,\n    \"stock\": 15,\n    \"is_available\": true,\n    \"created_at\": \"2025-08-12T11:02:08.412563Z\"\n  }\n]"
						}
					]
				},
				{
					"name": "Obtener Producto por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product has all required properties\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson).to.have.property('price');",
									"    pm.expect(responseJson).to.have.property('stock');",
									"    pm.expect(responseJson).to.have.property('is_available');",
									"    pm.expect(responseJson).to.have.property('created_at');",
									"});",
									"",
									"pm.test(\"Product ID matches requested ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = parseInt(pm.request.url.path[1]);",
									"    pm.expect(responseJson.id).to.eql(requestedId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/{{created_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{created_product_id}}"
							]
						},
						"description": "Obtiene los datos completos de un producto espec√≠fico por su ID √∫nico."
					},
					"response": [
						{
							"name": "Producto Encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/products/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"products",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Laptop Dell XPS 13\",\n  \"description\": \"Laptop ultrabook ideal para desarrollo\",\n  \"price\": 1299.99,\n  \"stock\": 15,\n  \"is_available\": true,\n  \"created_at\": \"2025-08-12T11:02:08.412563Z\"\n}"
						}
					]
				},
				{
					"name": "Crear Producto - Sin Descripci√≥n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product created without description\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson.description).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Mouse Inal√°mbrico\",\n  \"price\": 29.99,\n  \"stock\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/products/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								""
							]
						},
						"description": "Crea un producto sin descripci√≥n para probar campos opcionales."
					},
					"response": []
				}
			],
			"description": "Operaciones CRUD completas para la gesti√≥n del cat√°logo de productos."
		},
		{
			"name": "‚ùå Pruebas de Error",
			"item": [
				{
					"name": "Usuario No Encontrado (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message is correct\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.include('Usuario no encontrado');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"99999"
							]
						},
						"description": "Prueba el comportamiento cuando se busca un usuario que no existe."
					},
					"response": []
				},
				{
					"name": "Producto No Encontrado (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message is correct\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.include('Producto no encontrado');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"99999"
							]
						},
						"description": "Prueba el comportamiento cuando se busca un producto que no existe."
					},
					"response": []
				},
				{
					"name": "Email Inv√°lido (422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation error for email\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Usuario Test\",\n  \"email\": \"email-invalido\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Prueba la validaci√≥n de email con un formato inv√°lido."
					},
					"response": []
				}
			],
			"description": "Conjunto de pruebas para verificar el manejo correcto de errores y validaciones."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta antes de cada request",
					"console.log('Ejecutando request a:', pm.request.url);",
					"",
					"// Verificar que las variables de entorno est√©n configuradas",
					"if (!pm.environment.get('base_url')) {",
					"    console.warn('‚ö†Ô∏è Variable base_url no configurada. Usando valor por defecto.');",
					"    pm.environment.set('base_url', 'http://localhost:8000');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta despu√©s de cada response",
					"console.log('Response status:', pm.response.status);",
					"console.log('Response time:', pm.response.responseTime + 'ms');",
					"",
					"// Test global de Content-Type para responses exitosos",
					"if (pm.response.status === 'OK') {",
					"    pm.test('Content-Type is application/json', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}