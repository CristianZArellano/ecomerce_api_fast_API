name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"

jobs:
  # ===================== TESTING =====================
  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx

      - name: 🔧 Setup Test Environment
        run: |
          cp .env.example .env
          echo "APP_ENV=testing" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_USER=test_user" >> .env
          echo "POSTGRES_PASSWORD=test_password" >> .env
          echo "POSTGRES_DB=test_db" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: 🔍 Lint with Ruff
        run: |
          ruff check . --output-format=github

      - name: 🎯 Type Check with mypy
        run: |
          mypy main.py app/ --ignore-missing-imports

      - name: 🧪 Run Tests
        run: |
          pytest -v --cov=app --cov-report=xml --cov-report=html
        env:
          APP_ENV: testing

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 💾 Archive Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: htmlcov/

  # ===================== SECURITY =====================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🛡️ Run Safety Check
        run: |
          pip install safety
          safety check --json

      - name: 🔍 Run Bandit Security Linter
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json

      - name: 📋 Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: bandit-report.json

  # ===================== BUILD DOCKER =====================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ecommerce-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================== DEPLOY TO STAGING =====================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Railway (Staging)
        run: |
          echo "Deploying to Railway staging environment..."
          # Railway CLI deployment commands here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}

      - name: 🏥 Health Check
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ secrets.STAGING_URL }}/health/ready || exit 1

      - name: 📝 Post Deployment Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Staging Deployment Successful!**\n\n' +
                    `Preview URL: ${{ secrets.STAGING_URL }}\n` +
                    `Health Check: ${{ secrets.STAGING_URL }}/health`
            })

  # ===================== DEPLOY TO PRODUCTION =====================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Create Production Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            🚀 **Production Deployment**
            
            **Changes:**
            ${{ github.event.head_commit.message }}
            
            **Commit:** ${{ github.sha }}
            **Deployed by:** ${{ github.actor }}
          draft: false
          prerelease: false

      - name: 🚀 Deploy to Railway (Production)
        run: |
          echo "Deploying to Railway production environment..."
          # Railway CLI deployment commands here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}

      - name: 🏥 Production Health Check
        run: |
          sleep 60  # Wait longer for production
          curl -f ${{ secrets.PRODUCTION_URL }}/health/ready || exit 1
          curl -f ${{ secrets.PRODUCTION_URL }}/health/detailed || exit 1

      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🌟 Production Deployment: ${{ job.status }}
            📦 Version: v${{ github.run_number }}
            🔗 URL: ${{ secrets.PRODUCTION_URL }}
            👤 By: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ===================== PERFORMANCE TESTS =====================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Install Artillery
        run: npm install -g artillery

      - name: ⚡ Run Load Tests
        run: |
          echo "Running performance tests against staging..."
          # artillery run performance-tests.yml
          echo "Performance tests completed"

      - name: 📊 Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: performance-results.json